HELLO, WE STARTED A PROJECT LONG A GO WHERE YOU HELPED TO ACCOMPLISH THE MOST OF IT,
THIS WAS MY EARLY REQUEST & INSTRUCTIONS WHICH YOU WORKED ON AND PROVIDED THE SOLUTION

--->PLEASE ANALYSE EVERYTHING AND STORE/KEEP THESE DETAILS FOR FUTURE USE IN ALL CONVERSATION THAT WE'LL HAVE ABOUT IT


hello, do you know anything about stock softwares with key points stock[ in, out, present, ]  where it should be storing different items/goods let's say for example Mobile phones then it should have store[imei,storage,color,picture(s),name,price e.t.c]

lets say i'll use flutter, nodejs for backend and reactjs for web frontend . And this app will not only deal with phones but other products too like [clothes -men/women-top/bottom-shoes], laptops, phone covers e.t.c it'll need to be dynamic in dealing with different types of products & entries we'll need to achieve this

Great so now generate coding development flow start with ->backend(& database)->mobile app-> web frontend.
-database is mysql, and for ids i'll prefer numbers over uuid,
-all tables in small letters,
-Implement light/dark mode
-Multilanguage
- There should be a switch from backend/table that allows to operate offline if enabled but by default it should operate only online
-Incase there is no internet to communicate with online server implement(online/offline) so as when internet is back there should be a means to sync data to server again
-Same for login should be able to login offline incase on internet problems
- implement notifications feature for (various stock alerts like few items remain e.t.c)
-Responsive UI across different devices
-Analyse carefully&keen on how the interfaces/screens should look like

-ALSO DO ANYTHING THAT YOU THINK WILL BE PREFERED AND USEFUL FEATURES
-Rmember to keep it simple and clear no need for complicated processes,

-For colors ill prefer
// Base colors
$color-primary: #461B93;
$color-secondary: #6A3CBC;
$color-tertiary: #8253D7;
$color-accent: #D4ADFC;

// Backgrounds
$bg-light: #f5f6fa;
$bg-white: #ffffff;
$bg-dark: #1e1e1e;
$bg-darker: #2d2d2d;

// Text
$text-dark: #2d3436;
$text-medium: #636e72;
$text-muted-light: #b2bec3;
$text-muted-dark: #7f8c8d;
$text-on-primary: #ffffff;

// Status
$status-success: #00b894;
$status-error: #d63031;

// UI States
$hover-dark-bg: #16213e;
$highlight-light: #CDC1FF;

// Shadows
$shadow-light: 0 2px 8px rgba(0, 0, 0, 0.1);
$shadow-medium: 0 2px 8px rgba(0, 0, 0, 0.2);
$shadow-dark: 0 2px 8px rgba(0, 0, 0, 0.3);





--->YOU COMPLETED THE BACKEND
Now this is my complete backend and these are the routes, models & controllers in the backend,

MODELS
--->"stock-management-system\backend\models\user.js"
const bcrypt = require('bcrypt');

module.exports = (sequelize, DataTypes) => {
  const User = sequelize.define(
    'user',
    {
      id: {
        type: DataTypes.INTEGER,
        primaryKey: true,
        autoIncrement: true,
      },
      username: {
        type: DataTypes.STRING(50),
        allowNull: false,
        unique: true,
      },
      password: {
        type: DataTypes.STRING(255),
        allowNull: false,
      },
      full_name: {
        type: DataTypes.STRING(100),
      },
      email: {
        type: DataTypes.STRING(100),
        unique: true,
        validate: {
          isEmail: true,
        },
      },
      role: {
        type: DataTypes.ENUM('admin', 'manager', 'staff'),
        allowNull: false,
      },
      is_active: {
        type: DataTypes.BOOLEAN,
        defaultValue: true,
      },
      last_login: {
        type: DataTypes.DATE,
      },
      language_preference: {
        type: DataTypes.STRING(10),
        defaultValue: 'en',
      },
      theme_preference: {
        type: DataTypes.ENUM('light', 'dark'),
        defaultValue: 'light',
      },
    },
    {
      timestamps: true,
      underscored: true,
      tableName: 'users',
    }
  );

  // 🔐 Hash password before saving
  User.beforeCreate(async (user) => {
    const salt = await bcrypt.genSalt(10);
    user.password = await bcrypt.hash(user.password, salt);
  });

  User.beforeUpdate(async (user) => {
    if (user.changed('password')) {
      const salt = await bcrypt.genSalt(10);
      user.password = await bcrypt.hash(user.password, salt);
    }
  });

  // 🔐 Compare password
  User.prototype.comparePassword = async function (inputPassword) {
    return await bcrypt.compare(inputPassword, this.password);
  };

  return User;
};



--->"stock-management-system\backend\models\attribute.js"
module.exports = (sequelize, DataTypes) => {
  const attribute = sequelize.define(
    'attribute',
    {
      id: { type: DataTypes.INTEGER, primaryKey: true, autoIncrement: true },
      name: { type: DataTypes.STRING(100), allowNull: false },
      data_type: {
        type: DataTypes.ENUM('text', 'number', 'boolean', 'date', 'dropdown'),
        allowNull: false,
      },
      product_type_id: { type: DataTypes.INTEGER, allowNull: false },
      is_required: { type: DataTypes.BOOLEAN, defaultValue: false },
    },
    {
      timestamps: true,
      underscored: true,
      tableName: 'attributes',
    }
  );

  attribute.associate = (models) => {
    attribute.belongsTo(models.productType, {
      foreignKey: 'product_type_id',
      as: 'attribute_product_types',
    });
    attribute.hasMany(models.attributeOption, {
      foreignKey: 'attribute_id',
      as: 'options',
    });
  };

  return attribute;
};




--->"stock-management-system\backend\models\attributeOption.js"
module.exports = (sequelize, DataTypes) => {
  const attributeOption = sequelize.define(
    'attributeOption',
    {
      id: { type: DataTypes.INTEGER, primaryKey: true, autoIncrement: true },
      attribute_id: { type: DataTypes.INTEGER, allowNull: false },
      value: { type: DataTypes.STRING(100), allowNull: false },
    },
    {
      timestamps: true,
      underscored: true,
      tableName: 'attribute_options',
      updatedAt: false,
    }
  );

  attributeOption.associate = (models) => {
    attributeOption.belongsTo(models.attribute, {
      foreignKey: 'attribute_id',
      as: 'attribute',
    });
  };

  return attributeOption;
};




--->"stock-management-system\backend\models\category.js"
module.exports = (sequelize, DataTypes) => {
  const category = sequelize.define(
    'category',
    {
      id: { type: DataTypes.INTEGER, primaryKey: true, autoIncrement: true },
      name: { type: DataTypes.STRING(100), allowNull: false },
      description: { type: DataTypes.TEXT },
      parent_id: { type: DataTypes.INTEGER, allowNull: true },
    },
    {
      timestamps: true,
      underscored: true,
      tableName: 'categories',
    }
  );

  category.associate = (models) => {
    category.belongsTo(models.category, {
      foreignKey: 'parent_id',
      as: 'parent',
    });
    category.hasMany(models.category, {
      foreignKey: 'parent_id',
      as: 'children',
    });
    category.hasMany(models.productType, {
      foreignKey: 'category_id',
      as: 'product_types',
    });
  };

  return category;
};




--->"stock-management-system\backend\models\index.js"




--->"stock-management-system\backend\models\Inventory.js"
module.exports = (sequelize, DataTypes) => {
  const inventory = sequelize.define(
    'inventory',
    {
      id: {
        type: DataTypes.INTEGER,
        primaryKey: true,
        autoIncrement: true,
      },
      quantity: {
        type: DataTypes.INTEGER,
        allowNull: false,
        defaultValue: 0,
      },
      low_stock_threshold: {
        type: DataTypes.INTEGER,
        allowNull: false,
        defaultValue: 5,
      },
    },
    {
      timestamps: true,
      underscored: true,
      tableName: 'inventory',
    }
  );

  inventory.associate = (models) => {
    inventory.belongsTo(models.product, {
      foreignKey: 'product_id',
      as: 'product',
    });
  };

  return inventory;
};



--->"stock-management-system\backend\models\notification.js"
module.exports = (sequelize, DataTypes) => {
  const notification = sequelize.define(
    'notification',
    {
      id: { type: DataTypes.INTEGER, primaryKey: true, autoIncrement: true },
      user_id: { type: DataTypes.INTEGER, allowNull: false },
      title: { type: DataTypes.STRING(255), allowNull: false },
      message: { type: DataTypes.TEXT, allowNull: false },
      notification_type: {
        type: DataTypes.ENUM('stock_alert', 'system', 'other'),
        allowNull: false,
      },
      is_read: { type: DataTypes.BOOLEAN, defaultValue: false },
    },
    {
      timestamps: true,
      underscored: true,
      tableName: 'notifications',
    }
  );

  notification.associate = (models) => {
    notification.belongsTo(models.user, {
      foreignKey: 'user_id',
      as: 'user',
    });
  };

  return notification;
};




--->"stock-management-system\backend\models\product.js"
module.exports = (sequelize, DataTypes) => {
  const product = sequelize.define(
    'product',
    {
      id: {
        type: DataTypes.INTEGER,
        primaryKey: true,
        autoIncrement: true,
      },
      name: {
        type: DataTypes.STRING(255),
        allowNull: false,
      },
      base_price: {
        type: DataTypes.DECIMAL(10, 2),
        allowNull: false,
      },
      description: {
        type: DataTypes.TEXT,
      },
      is_active: {
        type: DataTypes.BOOLEAN,
        defaultValue: true,
      },
    },
    {
      timestamps: true,
      underscored: true,
      tableName: 'products',
    }
  );

  product.associate = (models) => {
    product.belongsTo(models.productType, {
      foreignKey: 'product_type_id',
      as: 'product_type',
    });
    product.belongsTo(models.category, {
      foreignKey: 'category_id',
      as: 'category',
    });
    product.hasMany(models.productAttribute, {
      foreignKey: 'product_id',
      as: 'attributes',
    });
    product.hasOne(models.inventory, {
      foreignKey: 'product_id',
      as: 'inventory',
    });
    product.hasMany(models.stockMovement, {
      foreignKey: 'product_id',
      as: 'movements',
    });
  };

  return product;
};



--->"stock-management-system\backend\models\productAttribute.js"
module.exports = (sequelize, DataTypes) => {
  const productAttribute = sequelize.define(
    'productAttribute',
    {
      id: { type: DataTypes.INTEGER, primaryKey: true, autoIncrement: true },
      product_id: { type: DataTypes.INTEGER, allowNull: false },
      attribute_id: { type: DataTypes.INTEGER, allowNull: false },
      value: { type: DataTypes.TEXT },
    },
    {
      timestamps: true,
      underscored: true,
      tableName: 'product_attributes',
    }
  );

  productAttribute.associate = (models) => {
    productAttribute.belongsTo(models.product, {
      foreignKey: 'product_id',
      as: 'product',
    });
    productAttribute.belongsTo(models.attribute, {
      foreignKey: 'attribute_id',
      as: 'attribute',
    });
  };

  return productAttribute;
};




--->"stock-management-system\backend\models\productType.js"
module.exports = (sequelize, DataTypes) => {
  const productType = sequelize.define(
    'productType',
    {
      id: { type: DataTypes.INTEGER, primaryKey: true, autoIncrement: true },
      name: { type: DataTypes.STRING(100), allowNull: false },
      category_id: { type: DataTypes.INTEGER, allowNull: false },
    },
    {
      timestamps: true,
      underscored: true,
      tableName: 'product_types',
    }
  );

  productType.associate = (models) => {
    productType.belongsTo(models.category, {
      foreignKey: 'category_id',
      as: 'category',
    });
    productType.hasMany(models.attribute, {
      foreignKey: 'product_type_id',
      as: 'attributes',
    });
  };

  return productType;
};




--->"stock-management-system\backend\models\setting.js"
module.exports = (sequelize, DataTypes) => {
  const setting = sequelize.define(
    'setting',
    {
      id: { type: DataTypes.INTEGER, primaryKey: true, autoIncrement: true },
      setting_key: {
        type: DataTypes.STRING(100),
        allowNull: false,
        unique: true,
      },
      setting_value: { type: DataTypes.TEXT },
    },
    {
      timestamps: true,
      underscored: true,
      tableName: 'settings',
    }
  );

  return setting;
};




--->"stock-management-system\backend\models\stockMovement.js"
module.exports = (sequelize, DataTypes) => {
  const stockMovement = sequelize.define(
    'stockMovement',
    {
      id: { type: DataTypes.INTEGER, primaryKey: true, autoIncrement: true },
      product_id: { type: DataTypes.INTEGER, allowNull: false },
      movement_type: {
        type: DataTypes.ENUM('in', 'out', 'adjustment'),
        allowNull: false,
      },
      quantity: { type: DataTypes.INTEGER, allowNull: false },
      reference: { type: DataTypes.STRING(100) },
      notes: { type: DataTypes.TEXT },
      user_id: { type: DataTypes.INTEGER, allowNull: false },
      movement_date: { type: DataTypes.DATE, defaultValue: DataTypes.NOW },
    },
    {
      timestamps: false,
      underscored: true,
      tableName: 'stock_movements',
    }
  );

  stockMovement.associate = (models) => {
    stockMovement.belongsTo(models.product, {
      foreignKey: 'product_id',
      as: 'product',
    });
    stockMovement.belongsTo(models.user, {
      foreignKey: 'user_id',
      as: 'user',
    });
  };

  return stockMovement;
};




--->"stock-management-system\backend\models\syncQueue.js"
module.exports = (sequelize, DataTypes) => {
  const syncQueue = sequelize.define(
    'syncQueue',
    {
      id: { type: DataTypes.INTEGER, primaryKey: true, autoIncrement: true },
      table_name: { type: DataTypes.STRING(50), allowNull: false },
      record_id: { type: DataTypes.INTEGER, allowNull: false },
      operation: {
        type: DataTypes.ENUM('create', 'update', 'delete'),
        allowNull: false,
      },
      data: { type: DataTypes.JSON },
      is_synced: { type: DataTypes.BOOLEAN, defaultValue: false },
      sync_timestamp: { type: DataTypes.DATE, allowNull: true },
    },
    {
      timestamps: true,
      createdAt: 'created_at',
      updatedAt: false,
      underscored: true,
      tableName: 'sync_queue',
    }
  );

  return syncQueue;
};


CONTROLLERS
"stock-management-system\backend\controllers\syncQueueController.js"
"stock-management-system\backend\controllers\attributeController.js"
"stock-management-system\backend\controllers\attributeOptionController.js"
"stock-management-system\backend\controllers\authController.js"
"stock-management-system\backend\controllers\categoryController.js"
"stock-management-system\backend\controllers\inventoryController.js"
"stock-management-system\backend\controllers\notificationController.js"
"stock-management-system\backend\controllers\productAttributeController.js"
"stock-management-system\backend\controllers\productController.js"
"stock-management-system\backend\controllers\productTypeController.js"
"stock-management-system\backend\controllers\settingController.js"
"stock-management-system\backend\controllers\stockMovementController.js"
"stock-management-system\backend\controllers\syncController.js"

ROUTES
"stock-management-system\backend\routes\attributeOptionRoutes.js"
"stock-management-system\backend\routes\attributeRoutes.js"
"stock-management-system\backend\routes\authRoutes.js"
"stock-management-system\backend\routes\categoryRoutes.js"
"stock-management-system\backend\routes\index.js"
"stock-management-system\backend\routes\inventoryRoutes.js"
"stock-management-system\backend\routes\notificationRoutes.js"
"stock-management-system\backend\routes\productAttributeRoutes.js"
"stock-management-system\backend\routes\productRoutes.js"
"stock-management-system\backend\routes\productTypeRoutes.js"
"stock-management-system\backend\routes\settingRoutes.js"
"stock-management-system\backend\routes\stockMovementRoutes.js"
"stock-management-system\backend\routes\syncQueueRoutes.js"


----------------------------------------------------------------------------
HERE IS THE FLUTTER/MOBILE PROJECT STRUCTURE

lib/
├── app/                   # Application-level config and setup
│   ├── config/
│   │   ├── localization.dart
│   │   ├── router.dart
│   │   └── theme.dart
│   └── app.dart
│
├── data/                  # Data layer (data sources, repositories, adapters)
│   ├── adapters/
│   │   └── product_adapter.dart
│   ├── datasources/
│   │   ├── local/
│   │   │   ├── auth_local.dart
│   │   │   └── hive_service.dart
│   │   └── remote/
│   │       ├── auth_api.dart
│   │       ├── inventory_api.dart
│   │       └── product_api.dart
│   ├── models/
│   │   └── product_model.dart
│   └── repositories/
│       ├── auth_repository.dart
│       ├── inventory_repository.dart
│       ├── product_repository.dart
│       ├── product_repository_impl.dart
│       └── sync_repository.dart
│
├── domain/                # Domain layer (entities, repositories, usecases)
│   ├── entities/
│   │   ├── login_response.dart
│   │   ├── notification.dart
│   │   ├── product.dart
│   │   ├── stock_movement.dart
│   │   ├── sync_queue_item.dart
│   │   ├── sync_queue_item.g.dart
│   │   ├── user.dart
│   │   └── user.g.dart
│   ├── exceptions/
│   │   ├── auth_exceptions.dart
│   │   └── sync_exceptions.dart
│   ├── repositories/
│   │   ├── auth_repository.dart
│   │   ├── inventory_repository.dart
│   │   ├── notification_repository.dart
│   │   ├── product_repository.dart
│   │   └── sync_repository.dart
│   └── usecases/
│       └── auth/
│           └── login_usecase.dart
│
├── presentation/          # Presentation/UI layer (Blocs, Screens, Widgets)
│   ├── bloc/
│   │   ├── auth/
│   │   │   ├── auth_bloc.dart
│   │   │   ├── auth_event.dart
│   │   │   └── auth_state.dart
│   │   ├── inventory/
│   │   │   ├── stock_movement_bloc.dart
│   │   │   ├── stock_movement_event.dart
│   │   │   └── stock_movement_state.dart
│   │   ├── network/
│   │   │   ├── network_bloc.dart
│   │   │   ├── network_event.dart
│   │   │   └── network_state.dart
│   │   ├── notifications/
│   │   │   ├── notifications_bloc.dart
│   │   │   ├── notifications_event.dart
│   │   │   └── notifications_state.dart
│   │   ├── products/
│   │   │   ├── product_list_bloc.dart
│   │   │   ├── product_list_event.dart
│   │   │   └── product_list_state.dart
│   │   ├── settings/
│   │   │   ├── settings_bloc.dart
│   │   │   ├── settings_event.dart
│   │   │   └── settings_state.dart
│   │   └── sync/
│   │       ├── sync_bloc.dart
│   │       ├── sync_event.dart
│   │       └── sync_state.dart
│   ├── cubits/
│   │   ├── connectivity_cubit.dart
│   │   └── connectivity_state.dart
│   ├── screens/
│   │   ├── auth/
│   │   │   └── login_screen.dart
│   │   ├── home/
│   │   │   └── home_screen.dart
│   │   ├── inventory/
│   │   │   └── stock_movement_screen.dart
│   │   ├── notifications/
│   │   │   └── notifications_screen.dart
│   │   ├── products/
│   │   │   └── product_list_screen.dart
│   │   ├── profile/
│   │   │   └── profile_screen.dart
│   │   ├── settings/
│   │   │   └── settings_screen.dart
│   │   └── sync/
│   │       └── sync_screen.dart
│   ├── main_navigation_screen.dart
│   └── widgets/
│       ├── forms/
│       │   ├── login_form.dart
│       │   └── inventory/
│       │       └── stock_movement_form.dart
│       ├── notifications/
│       │   └── notification_item.dart
│       ├── product/
│       │   └── app_scaffold.dart
│       ├── empty_state.dart
│       ├── loading_indicator.dart
│       └── network_status_bar.dart
│
├── utils/                 # Utilities, constants, helpers, services
│   ├── constants/
│   │   ├── environment.dart
│   │   └── strings.dart
│   ├── extensions/
│   │   ├── context_extensions.dart
│   │   └── string_extensions.dart
│   ├── helpers/
│   │   └── database_helper.dart
│   └── services/
│       ├── background_sync_service.dart
│       ├── connectivity_service.dart
│       ├── notification_service.dart
│       └── sync_service.dart
│
├── injection_container.dart
└── main.dart





HERE ARE THE MOBILE/FLUTTER CODES

--->lib/main.dart





--->lib/app/app.dart





--->lib/app/config/router.dart





--->lib/presentation/screens/main_navigation_screen.dart





--->lib/presentation/screens/home/home_screen.dart





--->lib/presentation/screens/products/product_list_screen.dart





--->lib/data/datasources/remote/auth_api.dart





--->lib/domain/entities/user.dart





--->lib/domain/entities/user.g.dart





--->lib/data/repositories/auth_repository.dart





--->lib/presentation/bloc/auth/auth_bloc.dart





--->lib/domain/exceptions/auth_exceptions.dart





--->lib/data/datasources/local/auth_local.dart





--->lib/domain/entities/login_response.dart





--->lib/presentation/bloc/auth/auth_event.dart





--->lib/domain/usecases/auth/login_usecase.dart





--->
--->
--->

--->lib/data/datasources/remote/product_api.dart





--->lib/data/repositories/sync_repository.dart





--->lib/domain/repositories/sync_repository.dart





--->lib/domain/entities/product.dart





--->lib/presentation/bloc/products/product_list_bloc.dart





--->lib/domain/repositories/sync_repository.dart





--->lib/data/repositories/product_repository.dart






--->pubspec.yaml






THSESE ARE MISSING & IF THEY ARE NOT IMPORTANT DON'T IMPLEMENT THEM
--->lib/domain/entities/attribute.dart
--->lib/domain/entities/inventory.dart
--->lib/domain/entities/product_attribute.dart
--->lib/data/repositories/sync_repository_impl.dart
--->lib/data/repositories/product_repository_impl.dart







===>PLEASE ANALYSE EVERYTHING AND STORE/KEEP THESE DETAILS FOR FUTURE USE IN ALL CONVERSATION THAT WE'LL HAVE ABOUT IT

===>If you need me to provide any file that i've not yet provided just ask
===>Lets complete all the functionalities of [stock in, out, available, search items, stats & cards in dashboard home, recent activities, settings, light&dark mode switching, language switching, and other mobile-to-backend related things ]
===>You can modify the appearance/interface to make it more appealing, user friendly, professional & futuristics.
===>Remember to make codes very simple

